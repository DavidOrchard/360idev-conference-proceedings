
//   ****************************************************************************
//  ******************************************************************************
// ********************************************************************************
// **** ===========================================================================
// ****  Name     : CommonTransform.h
// ****  Part of  : Transform
// ****  Created  : 09/12/2004 by Emanuele Cipolloni
// ****  Description:
// ****     The main class definition for the application Transform.
// ****
// ****
// ****     Initial content was generated by eyeGT Creator.
// ****
// ****  Version  : 1.1
// ****  Copyright: (C) Copyright 2001-2004 by Barefoot Software Inc.
// **** ===========================================================================
// ********************************************************************************
//  ******************************************************************************
//   ****************************************************************************

#ifndef COMMONTRANSFORM_H
#define COMMONTRANSFORM_H

//platform first
#include "eyeGTSym.h"
#include "eyeGTPlatform.h"

// INCLUDES
#if defined(UNDER_SYMBIAN)
#include <e32std.h>
#include <libc/stdio.h>
#include <fbs.h>
#elif defined(UNDER_CE)
#include <stdio.h>
#endif

//Global definitions 
#include "CommonTransformDefs.h"

#if defined(__ARM__) && (UNDER_SYMBIAN)
#include "SocketsNotify.h"
#endif

#if defined(__WINS__)
#include "HTTPInterface.h"
#endif

// CLASS FORWARD DECLARATION
class CSocketsEngine;

//Include the Jpeg Decompressing Interface
#include "JPEG_dec.h"

//Keys from telephone keyboard
enum TPhoneKeys {
	pk0			= 0,
	pk1			= 1,
	pk2			= 2,
	pk3			= 3,
	pk4			= 4,
	pk5			= 5,
	pk6			= 6,
	pk7			= 7,
	pk8			= 8,
	pk9			= 9
};

//Default colors definition
#define CMGradStartColorR 255
#define CMGradStartColorG 255
#define CMGradStartColorB 255

#define CMGradEndColorR  50
#define CMGradEndColorG  66
#define CMGradEndColorB 190

#define CMBannerForeColorR 255
#define CMBannerForeColorG 255
#define CMBannerForeColorB 0

#define CMBannerShadColorR 0
#define CMBannerShadColorG 0
#define CMBannerShadColorB 0



//TODO : Uncomment and insert Particles IDs here
enum TParticlesID {
	pidARIALBLACKFONT			= 22,
	pidARIALBOLDFONT 			= 50,
	
	pidBOTTOMBANNER				= 90,
	pidBOTTOMFIELD				= 91,
	pidBOTTOMFIELDSHADOW		= 92,


	#if defined (DEVICE_HAS_TOUCHSCREEN)
	pidBOTTOMBARHIDDENBUTTON	=  93,
	pidBOTTOMBARCONTAINER		=  94,
	pidBOTTOMBAR				=  95,
	pidCMTBEXITSHAPE			= 703,
	pidCMTBAUTOSHAPE			= 704,
	pidCMTBSTOPSHAPE			= 705,
	pidCMTBCHANGESHAPE			= 706,
	#endif

	pidTWIRLSHAPE				= 151,
	pidCLOWNBMP					= 154,
	pidREDDISKSHAPE				= 158,
	pidDRAGBUTTON				= 160,
	pidDRAGBUTTONCONTAINER		= 165,
	pidBACKGROUNDSHAPE			= 167,
	pidCLOWNSHAPE				= 170,
	pidCLOWNBITMAP				= 172,
	pidYELLREDSHAPE				= 175,
	pidWALKLADYSHAPE			= 177,
	pidSTRANGESHAPE				= 179,
	pidMAINCONT					= 181,
	pidFIRSTCONT				= 182,
	pidSECONDCONT				= 183,
	pidTHIRDCONT				= 184,
	pidWALKINGLADY				= 200, // + 29
};

//Directions from Joypad, Rocker etc etc
enum TJoyDirection {
	jIdle   = 0x00,
	jUp		= 0x01,
	jDown	= 0x02,
	jLeft	= 0x04,
	jRight	= 0x08
};


//Maximum number of fader items
#define FADER_MAX_ITEMS_NUM 20
#define FADER_MAX_ITEM_LEN	30

//***
//**
//**  CCommonTransform container control class.
//**  
//***

class CCommonTransform 
	
    {
    public: // Constructors and destructor
        
	//**
        //* Constructor.
        //**
		CCommonTransform(char* ApplicationPath, int ScreenDepth, bool ScreenInverted, int ScreenWidth, int ScreenHeight);

        /**
        * Destructor.
        */
        ~CCommonTransform();

    public: // New functions

    public: // Functions from base classes

		void InitializeFader(int StepSize, bool FadeIn, bool AllowAction);
		void AddFaderItem(char* ItemName);
		void ClearFaderItem(char* ItemName);
		void FadeStep();
		
		void CreateBottomBanner();
		void DeleteBottomBanner();
		void SetBottomBanner(int MessageIdx);
		void FadeBottomBanner();

		#if defined(DEVICE_HAS_TOUCHSCREEN)
		void CreateBottomBar();
		void RefreshBottomBar();
		void DeleteBottomBar();
		void SetupBottomBar();
		void ChangeToolbarFocus();
		#endif


    public: // Functions from base classes

 
 
    public: //data
	

		U32 eyeGTCanvas;

		U8 jdir;
      
		U8 Accel;
		U8 AccelTime;
		
		int BlinkCount;

		int ClientWidth;
		int ClientHeight;

		int Bottombar_Hide_Pos;
		int Bottombar_Norm_Pos;

		//Time out for messages 
		int MessageCounter;


		//The group of messages we are pointing at
		char MessageGroup[6][30];
		int MessageSID[6][2];

		//How many messages we have in this group
		int MessageLimit;

		//Which message is currently displayed
		int MessageIdx;

		//Set the current messages group
		void SetupBottomBanner(TMessagelimites MsgGroup);

		//Used to keep a backup of the previously displayed message group
		TMessagelimites BackMsgGroup;
		TMessagelimites ActualMsgGroup;

		//Banner fading variables
		BOOL BottomFading;
		BOOL BottomFadingIn;
		int BottomFadingLevel;

		void DeviceKeyboard(TPhoneKeys PhoneKey);

		void JoystickButton();
		void HandleJoystick();
		void HandleJoystickButton();
		void LeftMenuButton();
		bool RightMenuButton();
		void DeleteButton(int Degree);
		void ZoomIn( void );
		void ZoomOut( void );

		/*!
		@function DoPeriodTask
  
		@discussion Called by period task static function
		*/
		void DoPeriodTask();


		//Show or hide the Bottom/Top banner
		void ShowElements(bool Visible, bool ShowBottomBanner);
		
		char* AppPath;
		
		char TempBuffer[512];

		int FaderCount;


		//Fader stuff
		char FaderList[FADER_MAX_ITEMS_NUM][FADER_MAX_ITEM_LEN];
		int FaderMaxIdx;
		bool FaderOn;
		bool FadingIn;
		bool FaderInited;
		int CurrFaderIdx;
		int FadeStepNum;
		int FadeStepSize;
		bool FadeAllowAction;

		bool FadeBannerAllowed;
		
		bool DoBanner;

		//All the particle to be created
		U8* ArialBoldFont;

		#if defined(DEVICE_HAS_TOUCHSCREEN)
		U8* CMToolbarShape;

		U16 tbButtons;
		U16 tbBackButtons;
		U16 tbfocusButtons;

		bool tbHidden;
		bool tbCanBeHidden;
		bool tbMoving;
		bool tbRaising;
		SFLOAT tbyPos;

		bool pointerisdown;

		bool PointerDown(int x, int y);
		void PointerUp(int x, int y);
		void PointerMove(int x, int y);
		#endif

		TJPEG_Decompressor* Jpeg_Decompressor;

		U8* TwirlShape;
		U8* WalkingLady;

		
		//These keep tracks of the button instanced ID 
		//Note: to be precise we place containers with buttons on them,
		//      so these are the instances of the containers.
		char* PointA, *PointB, *PointC;

		//This keep track of the triangle instance
		char* tri1, *base, *type, *shape;

		//this will true when we are dragging a button
		BOOL dragging;

		//This is true when we are doing automatic animation
		BOOL Auto;

		//These are the deltas used by the animation
		SFLOAT dx1, dy1, dx2, dy2, dx3, dy3;

		//The type of shape we are currently displaying
		int ShapeType;

		//The change counter
		int ChangeCnt;

		//Load all the resources needed by the demo
		void LoadResources();

		//Create the buttons and place then on the screen
		void CreateButtons();

		//Create the triangle and place it on the screen
		void CreateTriangle();

		//Create the wallpaper
		void CreateWallpaper();

		//Change the shape currently displayed
		void ChangeShape();

		//Trasform the shape
		void Transform();

		SFLOAT x1, y1, x2, y2, x3, y3;
	};

#endif

// End of File
